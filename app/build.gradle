plugins {
    id 'com.github.triplet.play' version '2.2.0'
}

apply plugin: 'com.android.application'

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.codingbuffalo.aerialdream"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1 // Will be incremented automatically on release
        versionName "0.93"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding = true
    }

    signingConfigs {
        release {
            def keystorePropertiesFile = rootProject.file("../AppSignature/keystore.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                keyAlias keystoreProperties.keyAlias
                keyPassword keystoreProperties.keyPassword
                storeFile file(keystoreProperties.storeFile)
                storePassword keystoreProperties.storePassword
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.12.1'
    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'androidx.leanback:leanback-preference:1.0.0'
    implementation 'com.billy.android:smart-swipe:1.1.2'
    testImplementation 'junit:junit:4.13'
}

task fetchPlaylistTask (type: Exec) {
    // Fetch playlist files
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'powershell', '-Command', '../fetch_playlists.ps1'
    } else {
        commandLine 'sh', '-c', '../fetch_playlists.sh'
    }
}

preBuild.dependsOn fetchPlaylistTask

clean.doFirst {
    // Delete playlists
    delete fileTree(dir:'src/main/res/raw/', include: 'tvos**.json')
}

play {
    serviceAccountCredentials = rootProject.file("../AppSignature/play-store.json")
    track = 'beta'
    resolutionStrategy = "auto"
}
